name: Deploy to AWS S3 + CloudFront

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  S3_BUCKET_STAGING: 'household-services-staging'
  S3_BUCKET_PRODUCTION: 'household-services-prod'
  CLOUDFRONT_DISTRIBUTION_ID_STAGING: 'E1234567890ABC'
  CLOUDFRONT_DISTRIBUTION_ID_PRODUCTION: 'E0987654321XYZ'
  AWS_REGION: 'us-east-1'

jobs:
  # Lint and Test Job
  test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npx tsc --noEmit

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3 Staging
        run: |
          # Upload HTML files with no-cache headers
          aws s3 sync dist/ s3://${{ env.S3_BUCKET_STAGING }} \
            --delete \
            --exclude "*.js" --exclude "*.css" --exclude "*.png" --exclude "*.jpg" \
            --exclude "*.jpeg" --exclude "*.gif" --exclude "*.svg" --exclude "*.ico" \
            --exclude "*.woff*" --exclude "*.ttf" \
            --cache-control "no-cache, no-store, must-revalidate"
          
          # Upload static assets with long-term caching
          aws s3 sync dist/ s3://${{ env.S3_BUCKET_STAGING }} \
            --exclude "*.html" --exclude "*.xml" --exclude "*.txt" \
            --cache-control "public, max-age=31536000, immutable"

      - name: Invalidate CloudFront Staging
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID_STAGING }} \
            --paths "/*"

      - name: Staging deployment success
        run: |
          echo "‚úÖ Staging deployment completed successfully!"
          echo "üåê Staging URL: https://staging.yourdomain.com"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, deploy-staging]
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create backup of current deployment
        run: |
          BACKUP_DIR="backup-$(date +%Y%m%d-%H%M%S)"
          aws s3 sync s3://${{ env.S3_BUCKET_PRODUCTION }} s3://${{ env.S3_BUCKET_PRODUCTION }}-backups/$BACKUP_DIR --delete || echo "No existing deployment to backup"

      - name: Deploy to S3 Production
        run: |
          # Upload HTML files with no-cache headers
          aws s3 sync dist/ s3://${{ env.S3_BUCKET_PRODUCTION }} \
            --delete \
            --exclude "*.js" --exclude "*.css" --exclude "*.png" --exclude "*.jpg" \
            --exclude "*.jpeg" --exclude "*.gif" --exclude "*.svg" --exclude "*.ico" \
            --exclude "*.woff*" --exclude "*.ttf" \
            --cache-control "no-cache, no-store, must-revalidate"
          
          # Upload static assets with long-term caching
          aws s3 sync dist/ s3://${{ env.S3_BUCKET_PRODUCTION }} \
            --exclude "*.html" --exclude "*.xml" --exclude "*.txt" \
            --cache-control "public, max-age=31536000, immutable"

      - name: Invalidate CloudFront Production
        run: |
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID_PRODUCTION }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "CloudFront invalidation ID: $INVALIDATION_ID"
          
          # Wait for invalidation to complete
          aws cloudfront wait invalidation-completed \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID_PRODUCTION }} \
            --id $INVALIDATION_ID

      - name: Health check
        run: |
          echo "Performing health check..."
          sleep 30  # Wait for deployment to propagate
          
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://yourdomain.com)
          if [ $HTTP_STATUS -eq 200 ]; then
            echo "‚úÖ Health check passed (HTTP $HTTP_STATUS)"
          else
            echo "‚ùå Health check failed (HTTP $HTTP_STATUS)"
            exit 1
          fi

      - name: Production deployment success
        run: |
          echo "üéâ Production deployment completed successfully!"
          echo "üåê Production URL: https://yourdomain.com"
          echo "üìä Deployment Summary:"
          echo "  ‚Ä¢ Environment: Production"
          echo "  ‚Ä¢ S3 Bucket: ${{ env.S3_BUCKET_PRODUCTION }}"
          echo "  ‚Ä¢ CloudFront Distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID_PRODUCTION }}"
          echo "  ‚Ä¢ Deployment Time: $(date)"

      - name: Notify deployment
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "üéâ Production deployment successful!"
            # Add notification logic here (Slack, Discord, email, etc.)
          else
            echo "‚ùå Production deployment failed!"
            # Add failure notification logic here
          fi