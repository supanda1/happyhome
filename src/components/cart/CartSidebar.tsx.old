import React, { useState, useEffect } from 'react';
import { getCart, applyCouponToCart, removeCouponFromCart, updateCartItemQuantity, removeFromCart, getCoupons, validateCoupon } from '../../utils/adminDataManager';

interface CartItem {
  id: string;
  serviceId: string;
  serviceName: string;
  variantId?: string;
  quantity: number;
  unitPrice: number;
  totalPrice: number;
}

interface Cart {
  id: string;
  userId: string;
  items: CartItem[];
  totalItems: number;
  totalAmount: number;
  subtotal: number;
  discountAmount: number;
  gstAmount: number;
  serviceChargeAmount: number;
  finalAmount: number;
  appliedCoupon: string | null;
  couponDetails?: {
    isPartiallyApplied: boolean;
    eligibleAmount: number;
    eligibleItemsCount: number;
    ineligibleItemsCount: number;
  };
}

interface CartSidebarProps {
  isVisible: boolean;
  onClose: () => void;
  onCheckout: () => void;
  onCartUpdate?: () => void;
  isCollapsed?: boolean;
  onToggleCollapse?: () => void;
}

export const CartSidebar: React.FC<CartSidebarProps> = ({ 
  isVisible, 
  onClose, 
  onCheckout, 
  onCartUpdate,
  isCollapsed = false,
  onToggleCollapse
}) => {
  const [cart, setCart] = useState<Cart | null>(null);
  const [loading, setLoading] = useState(false);
  const [couponCode, setCouponCode] = useState('');
  const [couponLoading, setCouponLoading] = useState(false);
  const [couponError, setCouponError] = useState('');
  const [couponSuccess, setCouponSuccess] = useState('');
  const [selectedCouponOption, setSelectedCouponOption] = useState('manual');
  const [availableCoupons, setAvailableCoupons] = useState<any[]>([]);
  const [updatingItems, setUpdatingItems] = useState<Set<string>>(new Set());

  // Load cart data
  const loadCart = async () => {
    try {
      setLoading(true);
      const cartData = await getCart();
      setCart(cartData);
    } catch (error) {
      console.error('Error loading cart:', error);
      setCart(null);
    } finally {
      setLoading(false);
    }
  };

  // Load available coupons from database API (same as CartPage)
  const loadAvailableCoupons = async () => {
    try {
      const coupons = await getCoupons();
      const currentDate = new Date();
      
      // Filter out expired and inactive coupons (same logic as CartPage)
      const validCoupons = coupons.filter((coupon: any) => {
        if (!coupon.is_active) return false;
        
        // Check if coupon has not expired
        const expiryDate = new Date(coupon.valid_until);
        const isNotExpired = currentDate <= expiryDate;
        
        // Check if coupon is already started (valid_from)
        const startDate = new Date(coupon.valid_from);
        const hasStarted = currentDate >= startDate;
        
        return isNotExpired && hasStarted;
      });
      
      // Transform API format to match display format
      const formattedCoupons = validCoupons.map((coupon: any) => ({
        code: coupon.code,
        title: coupon.title,
        description: coupon.description,
        discount: coupon.discount_type === 'percentage' 
          ? `${coupon.discount_value}% OFF`
          : coupon.discount_type === 'fixed_amount'
          ? `â‚¹${coupon.discount_value} OFF`
          : 'FREE SERVICE'
      }));
      
      setAvailableCoupons(formattedCoupons);
      console.log('ðŸ›’ CartSidebar - Available coupons loaded:', formattedCoupons.length);
      
    } catch (error) {
      console.error('ðŸ›’ CartSidebar - Failed to load coupons:', error);
      setAvailableCoupons([]);
    }
  };

  // Load cart and coupons on component mount
  useEffect(() => {
    // Always load cart and coupons since sidebar is now permanent
    loadCart();
    loadAvailableCoupons();
  }, []);

  // Handle manual coupon code input (same as CartPage)
  const handleManualCouponChange = (value: string) => {
    setCouponCode(value.toUpperCase());
    setCouponError('');
    setCouponSuccess('');
    
    // Check if the entered code matches any available coupon
    const matchedCoupon = availableCoupons.find(coupon => coupon.code === value.toUpperCase());
    if (matchedCoupon) {
      setSelectedCouponOption(matchedCoupon.code);
    } else {
      setSelectedCouponOption('manual');
    }
  };

  // Handle coupon option change
  const handleCouponOptionChange = (option: string) => {
    setSelectedCouponOption(option);
    setCouponError('');
    setCouponSuccess('');
    
    if (option !== 'manual') {
      setCouponCode(option);
    }
  };

  // Handle quantity update
  const handleQuantityUpdate = async (itemId: string, newQuantity: number) => {
    if (newQuantity < 1) {
      await handleRemoveItem(itemId);
      return;
    }

    try {
      setUpdatingItems(prev => new Set(prev).add(itemId));
      await updateCartItemQuantity(itemId, newQuantity);
      await loadCart(); // Refresh cart data
      onCartUpdate?.(); // Update global cart count
    } catch (error) {
      console.error('Error updating quantity:', error);
    } finally {
      setUpdatingItems(prev => {
        const newSet = new Set(prev);
        newSet.delete(itemId);
        return newSet;
      });
    }
  };

  // Handle item removal
  const handleRemoveItem = async (itemId: string) => {
    try {
      setUpdatingItems(prev => new Set(prev).add(itemId));
      await removeFromCart(itemId);
      await loadCart(); // Refresh cart data
      onCartUpdate?.(); // Update global cart count
    } catch (error) {
      console.error('Error removing item:', error);
    } finally {
      setUpdatingItems(prev => {
        const newSet = new Set(prev);
        newSet.delete(itemId);
        return newSet;
      });
    }
  };

  // Handle coupon application (enhanced like CartPage)
  const handleApplyCoupon = async () => {
    if (!couponCode.trim()) {
      setCouponError('Please enter a coupon code');
      return;
    }

    setCouponLoading(true);
    setCouponError('');
    setCouponSuccess('');

    try {
      // Apply coupon to cart
      const result = await applyCouponToCart(couponCode);
      
      if (result.success) {
        setCouponCode('');
        setCouponError('');
        setCouponSuccess(result.message || 'Coupon applied successfully!');
        setSelectedCouponOption('manual');
        await loadCart(); // Reload cart to show updated totals
        onCartUpdate?.(); // Update header cart count
      } else {
        setCouponError(result.message);
      }
    } catch (error) {
      setCouponError('Failed to apply coupon');
      console.error('Coupon application error:', error);
    } finally {
      setCouponLoading(false);
    }
  };

  // Handle coupon removal (enhanced like CartPage)
  const handleRemoveCoupon = async () => {
    try {
      setCouponSuccess(''); // Clear any success messages
      const success = await removeCouponFromCart();
      if (success) {
        await loadCart(); // Reload cart to show updated totals
        onCartUpdate?.(); // Update header cart count
      }
    } catch (error) {
      console.error('Failed to remove coupon:', error);
    }
  };

  // Always render the sidebar, but with different states
  return (
    <div className={`fixed top-0 right-0 h-full z-40 transition-all duration-300 ${
      isCollapsed 
        ? 'w-12' 
        : 'w-80'
    } bg-white shadow-xl border-l border-gray-200`}>
      
      {/* Collapsed State - Show only toggle button and cart count */}
      {isCollapsed ? (
        <div className="p-2">
          <button
            onClick={onToggleCollapse}
            className="w-8 h-8 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg flex items-center justify-center hover:shadow-lg transition-all"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
          </button>
          {cart && cart.totalItems > 0 && (
            <div className="mt-2 text-center">
              <div className="w-6 h-6 bg-orange-500 text-white text-xs rounded-full flex items-center justify-center mx-auto font-bold">
                {cart.totalItems}
              </div>
            </div>
          )}
        </div>
      ) : (
        /* Expanded State - Show full cart */
        <>
          {/* Header */}
          <div className="bg-gradient-to-r from-purple-600 to-blue-600 p-3 text-white flex-shrink-0">
            <div className="flex items-center justify-between">
              <h2 className="text-base font-bold">ðŸ›’ Your Cart</h2>
              <button 
                onClick={onToggleCollapse}
                className="text-white hover:text-gray-200 transition-colors"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
            {cart && (
              <div className="text-xs text-purple-100 mt-1">
                {cart.totalItems} item{cart.totalItems !== 1 ? 's' : ''} in cart
              </div>
            )}
          </div>

          {/* Scrollable Content */}
          <div className="flex-1 overflow-y-auto">
            {loading ? (
              <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
                <span className="ml-2 text-gray-600">Loading cart...</span>
              </div>
            ) : !cart || cart.items.length === 0 ? (
              <div className="text-center py-8">
                <div className="text-6xl mb-4">ðŸ›’</div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">Your cart is empty</h3>
                <p className="text-gray-600">Add some services to get started!</p>
              </div>
            ) : (
              <>
                {/* Cart Items */}
                <div className="space-y-4 mb-6">
                  <h3 className="font-semibold text-gray-900">Items</h3>
                  {cart.items.map((item) => (
                    <div key={item.id} className="bg-gray-50 rounded-lg p-3">
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex-1">
                          <h4 className="font-medium text-gray-900 text-sm">{item.serviceName}</h4>
                          <div className="text-xs text-gray-500">â‚¹{item.unitPrice} each</div>
                        </div>
                        <button
                          onClick={() => handleRemoveItem(item.id)}
                          disabled={updatingItems.has(item.id)}
                          className="text-red-500 hover:text-red-700 ml-2"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>
                      
                      {/* Quantity Controls */}
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={() => handleQuantityUpdate(item.id, item.quantity - 1)}
                            disabled={updatingItems.has(item.id) || item.quantity <= 1}
                            className="w-7 h-7 rounded-md border border-gray-300 flex items-center justify-center hover:bg-gray-100 disabled:opacity-50"
                          >
                            âˆ’
                          </button>
                          <span className="w-8 text-center font-medium">
                            {updatingItems.has(item.id) ? '...' : item.quantity}
                          </span>
                          <button
                            onClick={() => handleQuantityUpdate(item.id, item.quantity + 1)}
                            disabled={updatingItems.has(item.id)}
                            className="w-7 h-7 rounded-md border border-gray-300 flex items-center justify-center hover:bg-gray-100 disabled:opacity-50"
                          >
                            +
                          </button>
                        </div>
                        <div className="font-semibold text-green-600">
                          â‚¹{item.totalPrice}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Applied Coupon Display */}
                {cart.appliedCoupon && (
                  <div className="border-t pt-4 mb-4">
                    <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                            <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                          </div>
                          <div>
                            <div className="font-semibold text-green-800 text-sm">
                              {cart.appliedCoupon} Applied
                            </div>
                            {cart.couponDetails && (
                              <div className="text-xs text-green-600">
                                {cart.couponDetails.isPartiallyApplied ? (
                                  `Applied to ${cart.couponDetails.eligibleItemsCount} of ${cart.couponDetails.eligibleItemsCount + cart.couponDetails.ineligibleItemsCount} items`
                                ) : (
                                  `Applied to all ${cart.couponDetails.eligibleItemsCount} items`
                                )}
                              </div>
                            )}
                          </div>
                        </div>
                        <button
                          onClick={handleRemoveCoupon}
                          className="flex items-center space-x-1 text-red-500 hover:text-red-700 px-2 py-1 rounded-lg hover:bg-red-50 transition-colors border border-red-200 hover:border-red-300 text-xs font-medium"
                          title="Remove coupon"
                        >
                          <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                          <span>Remove</span>
                        </button>
                      </div>

                      {/* Partial Application Warning */}
                      {cart.couponDetails?.isPartiallyApplied && (
                        <div className="mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded-md">
                          <div className="flex items-start space-x-2">
                            <svg className="w-4 h-4 text-yellow-500 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z" />
                            </svg>
                            <div className="text-xs">
                              <div className="font-medium text-yellow-800">Partial Discount Applied</div>
                              <div className="text-yellow-700 mt-1">
                                This coupon only applies to certain services. 
                                {cart.couponDetails.ineligibleItemsCount > 0 && (
                                  <span> {cart.couponDetails.ineligibleItemsCount} items are not eligible.</span>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {/* Coupon Section */}
                {!cart.appliedCoupon && (
                  <div className="border-t pt-4 mb-6">
                    <h3 className="font-semibold text-gray-900 mb-3">Coupons & Offers</h3>
                    
                    {/* Available Coupons */}
                    {availableCoupons.length > 0 && (
                      <div className="space-y-2 mb-3">
                        {availableCoupons.slice(0, 2).map((coupon) => (
                          <div
                            key={coupon.code}
                            className={`p-2 border rounded cursor-pointer transition-all ${
                              selectedCouponOption === coupon.code
                                ? 'border-purple-500 bg-purple-50 shadow-sm'
                                : 'border-gray-200 hover:border-purple-300 bg-white hover:bg-purple-50'
                            }`}
                            onClick={() => handleCouponOptionChange(coupon.code)}
                          >
                            <div className="flex items-start space-x-2">
                              <input
                                type="radio"
                                name="couponOption"
                                checked={selectedCouponOption === coupon.code}
                                onChange={() => handleCouponOptionChange(coupon.code)}
                                className="mt-0.5 w-3 h-3 text-purple-600 focus:ring-purple-500"
                              />
                              <div className="flex-1">
                                <div className="text-xs font-semibold text-purple-600 mb-1">
                                  {coupon.code} â€¢ {coupon.discount}
                                </div>
                                <div className="text-xs text-gray-600 leading-tight">
                                  {coupon.title}
                                </div>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}

                    {/* Manual Input */}
                    <div
                      className={`p-2 border rounded cursor-pointer transition-all ${
                        selectedCouponOption === 'manual'
                          ? 'border-purple-500 bg-purple-50 shadow-sm'
                          : 'border-gray-200 hover:border-purple-300 bg-white hover:bg-purple-50'
                      }`}
                      onClick={() => handleCouponOptionChange('manual')}
                    >
                      <div className="flex items-start space-x-2">
                        <input
                          type="radio"
                          name="couponOption"
                          checked={selectedCouponOption === 'manual'}
                          onChange={() => handleCouponOptionChange('manual')}
                          className="mt-0.5 w-3 h-3 text-purple-600 focus:ring-purple-500"
                        />
                        <div className="flex-1">
                          <div className="text-xs font-semibold text-purple-600 mb-1">
                            Enter Custom Coupon Code
                          </div>
                          <input
                            type="text"
                            value={couponCode}
                            onChange={(e) => handleManualCouponChange(e.target.value)}
                            placeholder="Enter coupon code"
                            className="w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                            onClick={(e) => e.stopPropagation()}
                          />
                        </div>
                      </div>
                    </div>

                    {/* Apply Button */}
                    <button
                      onClick={handleApplyCoupon}
                      disabled={!couponCode || cart.totalItems === 0 || couponLoading}
                      className="w-full mt-3 px-3 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white text-sm font-semibold rounded-lg hover:from-purple-700 hover:to-indigo-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-all duration-300"
                    >
                      {couponLoading ? (
                        <>
                          <div className="inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                          Applying...
                        </>
                      ) : (
                        `Apply${couponCode ? ` ${couponCode}` : ' Coupon'}`
                      )}
                    </button>
                    
                    {/* Error Message */}
                    {couponError && (
                      <div className="mt-2 p-2 bg-red-50 border border-red-200 rounded">
                        <div className="flex items-center space-x-2">
                          <svg className="w-4 h-4 text-red-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                          <div className="text-xs text-red-600">{couponError}</div>
                        </div>
                      </div>
                    )}
                    
                    {/* Success Message */}
                    {couponSuccess && (
                      <div className="mt-2 p-2 bg-green-50 border border-green-200 rounded">
                        <div className="flex items-center space-x-2">
                          <svg className="w-4 h-4 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                          <div className="text-xs text-green-600">{couponSuccess}</div>
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {/* Order Summary */}
                <div className="border-t pt-4 space-y-3">
                  <h3 className="font-semibold text-gray-900 mb-3">Order Summary</h3>
                  
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>Subtotal ({cart.totalItems} items)</span>
                      <span>â‚¹{(cart.subtotal || cart.totalAmount).toFixed(2)}</span>
                    </div>
                    
                    {cart.discountAmount > 0 && (
                      <div className="space-y-1">
                        <div className="flex justify-between text-green-600">
                          <span>
                            Discount ({cart.appliedCoupon})
                            {cart.couponDetails?.isPartiallyApplied && (
                              <span className="text-xs text-gray-500 ml-1">
                                (Partial)
                              </span>
                            )}
                          </span>
                          <span>-â‚¹{cart.discountAmount}</span>
                        </div>
                        {cart.couponDetails?.isPartiallyApplied && (
                          <div className="text-xs text-gray-500 flex justify-between pl-2">
                            <span>Applied on â‚¹{cart.couponDetails.eligibleAmount}</span>
                            <span>{cart.couponDetails.ineligibleItemsCount} items excluded</span>
                          </div>
                        )}
                      </div>
                    )}
                    
                    <div className="flex justify-between text-sm">
                      <span>GST (18%)</span>
                      <span>â‚¹{cart.gstAmount.toFixed(2)}</span>
                    </div>
                    
                    <div className="flex justify-between text-sm">
                      <span>
                        Service charge
                        {cart.serviceChargeAmount > 0 && (
                          <span className="text-xs text-gray-400 ml-1">
                            (â‚¹79 Ã— {Math.ceil(cart.serviceChargeAmount / 79)} categories)
                          </span>
                        )}
                      </span>
                      <span className={cart.serviceChargeAmount > 0 ? 'text-gray-900' : 'text-green-600'}>
                        {cart.serviceChargeAmount > 0 ? `â‚¹${cart.serviceChargeAmount}` : 'FREE'}
                      </span>
                    </div>
                    
                    <hr />
                    <div className="flex justify-between text-lg font-bold">
                      <span>Total</span>
                      <span>â‚¹{cart.finalAmount}</span>
                    </div>
                  </div>
                </div>
              </>
            )}
          </div>

            {/* Footer */}
            {cart && cart.items.length > 0 && (
              <div className="border-t bg-gray-50 p-3 flex-shrink-0">
                <button
                  onClick={onCheckout}
                  className="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-2 rounded-lg text-sm font-semibold hover:from-purple-700 hover:to-blue-700 transition-all"
                >
                  Checkout - â‚¹{cart.finalAmount}
                </button>
              </div>
            )}
          </div>
        </>
      )}
    </div>
  );
};

export default CartSidebar;